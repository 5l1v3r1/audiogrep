{"name":"Audiogrep","tagline":"Creates audio supercuts.","body":"Audiogrep\r\n=========\r\n\r\nAudiogrep transcribes audio files and then creates \"audio supercuts\" based on search phrases. It uses [CMU Pocketsphinx](http://cmusphinx.sourceforge.net/) for speech-to-text and [pydub](http://pydub.com/) to stitch things together.\r\n\r\n##Requirements\r\nClone this repository, and then install the other requirements.\r\n```\r\npip install -r requirements.txt\r\n```\r\n\r\nInstall [ffmpeg](http://ffmpeg.org/) with Ogg/Vorbis support. If you're on a mac with [homebrew](http://brew.sh/) you can install ffmpeg with:\r\n```\r\nbrew install ffmpeg --with-libvpx --with-libvorbis\r\n```\r\n\r\nInstall [CMU Pocketsphinx](http://cmusphinx.sourceforge.net/). For mac\r\nusers I followed [these instructions](https://github.com/watsonbox/homebrew-cmu-sphinx) to get it working:\r\n```\r\nbrew tap watsonbox/cmu-sphinx\r\nbrew install --HEAD watsonbox/cmu-sphinx/cmu-sphinxbase\r\nbrew install --HEAD watsonbox/cmu-sphinx/cmu-sphinxtrain # optional\r\nbrew install --HEAD watsonbox/cmu-sphinx/cmu-pocketsphinx\r\n```\r\n\r\n##How to use it\r\nFirst, transcribe the audio (you'll only need to do this once per audio track, but it can take some time)\r\n```\r\n# transcribes all mp3s in the selected folder\r\npython audiogrep.py --input path/to/*.mp3 --transcribe\r\n```\r\nThen, basic use:\r\n```\r\n# returns all phrases with the word 'word' in them\r\npython audiogrep.py --input path/to/*.mp3 --search 'word'\r\n```\r\nThe previous example will extract phrase chunks containing the search term, but you can also just get individual words:\r\n```\r\npython audiogrep.py --input path/to/*.mp3 --search 'word' --output-mode word\r\n```\r\nIf you add the '--regex' flag you can use regular expressions. For example:\r\n```\r\n# creates a supercut of every instance of the words \"spectre\", \"haunting\" and \"europe\"\r\npython audiogrep.py --input path/to/*.mp3 --search 'spectre|haunting|europe' --output-mode word\r\n```\r\nYou can also construct 'frankenstein' sentences (mileage may vary):\r\n```\r\n# stupid joke\r\npython audiogrep.py --input path/to/*.mp3 --search 'my voice is my passport' --output-mode franken\r\n```\r\n\r\n###Options\r\n\r\naudiogrep can take a number of options:\r\n\r\n####--input / -i\r\nmp3 file or pattern for input\r\n\r\n####--output / -o\r\nName of the file to generate. By default this is \"supercut.mp3\"\r\n\r\n####--search / -s\r\nSearch term\r\n\r\n####--output-mode / -m\r\nSplice together phrases, single words, or \"frankenstein\" sentences.\r\nOptions are:\r\n* sentence: (this is the default)\r\n* word\r\n* franken\r\n\r\n####--padding / -p\r\nTime in milliseconds to add between audio segments. Default is 0.\r\n\r\n####--crossfade / -c\r\nTime in milliseconds to crossfade audio segments. Default is 0.\r\n\r\n####--demo / -d\r\nShow the results of the search without outputing a file\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}